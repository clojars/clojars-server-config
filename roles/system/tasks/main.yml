---

# general setup

- name: Verify Ansible meets Clojars version requirements.
  assert:
    that: "ansible_version.full is version_compare('2.5.4', '>=')"
    msg: >
      "You must update Ansible to at least 2.5.4 to deploy Clojars."

- name: check last time apt was updated
  stat: path=/var/lib/apt/periodic/update-success-stamp
  register: apt_update_details

- name: update apt caches
  become: yes
  # Is the time apt was last updated < the current time - 24 hours?
  when: "apt_update_details.stat.mtime < ansible_date_time.epoch|int  - (60 * 60 * 24)"
  apt: update_cache=yes
  # TODO: use cache_valid_time on installs instead?

- name: Upgrade APT to the latest safe packages
  apt: upgrade=safe

- name: Install required packages
  apt: state=installed name={{ item }}
  with_items: "{{ ubuntu_common_required_packages }}"

- name: Install optional packages
  apt: state=installed name={{ item }}
  with_items: "{{ ubuntu_common_optional_packages }}"

- name: set hostname
  hostname: name={{ hostname }}

- name: Set timezone to UTC
  when: ansible_date_time.tz != 'UTC'
  command: timedatectl set-timezone UTC

# TODO: set MOTD with instructions?

# user accounts
- name: Make sure we have a 'wheel' group
  group:
    name: wheel
    state: present

- name: Allow 'wheel' group to have passwordless sudo
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^%wheel'
    line: '%wheel ALL=(ALL) NOPASSWD: ALL'

- name: ensure admin user accounts exist
  user: name="{{ item.name }}" state=present shell="/bin/bash" groups=wheel
  when: "{{ item.active }}"
  with_items: "{{ admins }}"

# To remove accounts, set the admin's 'active' key in private/vars.yml to no,
# then rerun the playbook before removing them from the vars file
- name: remove unneeded admin accounts
  user: name="{{ item.name }}" state=absent remove=yes
  when: "{{ not item.active }}"
  with_items: "{{ admins }}"

- name: set public keys for admins
  authorized_key:
    user: "{{ item.name }}"
    key: "{{ lookup('file', './private/public-keys/{{ item.name }}.pub')}}"
    exclusive: true
    state: "{{ item.active | ternary('present', 'absent') }}"
  with_items: "{{ admins }}"

- name: ensure ansible user account exists
  user: name=ansible state=present shell="/bin/bash" groups=wheel

# This is a lot of faffing around, but there doesn't seem to be an easier way to do it.
# http://stackoverflow.com/questions/33032747/ansible-how-to-concatenate-files-contents-into-a-variable
- name: ensure ansible public keys folder exists
  file: path=/home/ansible/public-keys state=directory mode=0755

- name: copy ansible keys
  copy: src="./private/public-keys/{{item.name}}.pub" dest=/home/ansible/public-keys/
  with_items: "{{ admins }}"
  when: "{{ item.active }}"

- name: create authorized keys file
  assemble:
    src: /home/ansible/public-keys/
    dest: /home/ansible/.ssh/authorized_keys
    validate: 'ssh-keygen -lf %s'

- name: apply custom logwatch config
  template: src=logwatch-http.conf.j2 dest=/etc/logwatch/conf/services/http.conf

# includes

- include: rsync.yml

- include: postfix.yml

- include: hardening.yml
  become: yes
